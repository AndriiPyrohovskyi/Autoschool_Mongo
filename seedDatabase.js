require('dotenv').config();
const mongoose = require('mongoose');
const { faker } = require('@faker-js/faker');

// –Ü–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π
const Student = require('./src/models/student');
const Instructor = require('./src/models/instructor');
const Lesson = require('./src/models/lesson');
const Payment = require('./src/models/payment');

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∑–∞–ø–∏—Å—ñ–≤
const COUNTS = {
  students: 500,
  instructors: 10,
  lessons: 1000,
  payments: 1000
};

// –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î
mongoose.connect(process.env.MONGODB_URI)
  .then(() => console.log('–ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ MongoDB Atlas'))
  .catch(err => console.error('–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î:', err));

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ–µ–π–∫–æ–≤–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤
async function createStudents(count) {
  console.log(`–°—Ç–≤–æ—Ä–µ–Ω–Ω—è ${count} —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤...`);
  const students = [];
  
  for (let i = 0; i < count; i++) {
    const student = new Student({
      firstName: faker.person.firstName(),
      lastName: faker.person.lastName(),
      email: faker.internet.email(),
      phone: faker.phone.number('+380#########'),
      dateOfBirth: faker.date.between({ from: '1980-01-01', to: '2005-12-31' }),
      enrollmentDate: faker.date.between({ from: '2023-01-01', to: new Date() }),
      category: faker.helpers.arrayElement(['A', 'B', 'C', 'D']),
      status: faker.helpers.arrayElement(['active', 'completed', 'suspended'])
    });
    
    students.push(student);
  }
  
  await Student.insertMany(students);
  console.log('‚úÖ –°—Ç—É–¥–µ–Ω—Ç–∏ —Å—Ç–≤–æ—Ä–µ–Ω—ñ');
  return students;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ–µ–π–∫–æ–≤–∏—Ö —ñ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ñ–≤
async function createInstructors(count) {
  console.log(`–°—Ç–≤–æ—Ä–µ–Ω–Ω—è ${count} —ñ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ñ–≤...`);
  const instructors = [];
  
  for (let i = 0; i < count; i++) {
    const instructor = new Instructor({
      firstName: faker.person.firstName(),
      lastName: faker.person.lastName(),
      email: faker.internet.email(),
      phone: faker.phone.number('+380#########'),
      licenseNumber: faker.string.alphanumeric(10).toUpperCase(),
      categories: faker.helpers.arrayElements(['A', 'B', 'C', 'D'], { min: 1, max: 3 }),
      hourlyRate: faker.number.int({ min: 300, max: 800 })
    });
    
    instructors.push(instructor);
  }
  
  await Instructor.insertMany(instructors);
  console.log('‚úÖ –Ü–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω—ñ');
  return instructors;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ–µ–π–∫–æ–≤–∏—Ö –∑–∞–Ω—è—Ç—å
async function createLessons(count, students, instructors) {
  console.log(`–°—Ç–≤–æ—Ä–µ–Ω–Ω—è ${count} –∑–∞–Ω—è—Ç—å...`);
  const lessons = [];
  
  for (let i = 0; i < count; i++) {
    const lesson = new Lesson({
      student: faker.helpers.arrayElement(students)._id,
      instructor: faker.helpers.arrayElement(instructors)._id,
      date: faker.date.between({ from: '2024-01-01', to: '2024-12-31' }),
      duration: faker.helpers.arrayElement([45, 60, 90, 120]),
      type: faker.helpers.arrayElement(['theory', 'practice']),
      status: faker.helpers.arrayElement(['scheduled', 'completed', 'cancelled']),
      notes: faker.helpers.maybe(() => faker.lorem.sentence(), { probability: 0.3 })
    });
    
    lessons.push(lesson);
  }
  
  await Lesson.insertMany(lessons);
  console.log('‚úÖ –ó–∞–Ω—è—Ç—Ç—è —Å—Ç–≤–æ—Ä–µ–Ω—ñ');
  return lessons;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ–µ–π–∫–æ–≤–∏—Ö –ø–ª–∞—Ç–µ–∂—ñ–≤
async function createPayments(count, students) {
  console.log(`–°—Ç–≤–æ—Ä–µ–Ω–Ω—è ${count} –ø–ª–∞—Ç–µ–∂—ñ–≤...`);
  const payments = [];
  
  const paymentDescriptions = [
    '–û–ø–ª–∞—Ç–∞ –∑–∞ —Ç–µ–æ—Ä–µ—Ç–∏—á–Ω–∏–π –∫—É—Ä—Å',
    '–û–ø–ª–∞—Ç–∞ –∑–∞ –ø—Ä–∞–∫—Ç–∏—á–Ω—ñ –∑–∞–Ω—è—Ç—Ç—è',
    '–û–ø–ª–∞—Ç–∞ –∑–∞ –µ–∫–∑–∞–º–µ–Ω',
    '–î–æ–ø–ª–∞—Ç–∞ –∑–∞ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –∑–∞–Ω—è—Ç—Ç—è',
    '–û–ø–ª–∞—Ç–∞ –∑–∞ –º–µ–¥–æ–≥–ª—è–¥',
    '–û–ø–ª–∞—Ç–∞ –∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∏'
  ];
  
  for (let i = 0; i < count; i++) {
    const payment = new Payment({
      student: faker.helpers.arrayElement(students)._id,
      amount: faker.number.int({ min: 500, max: 5000 }),
      paymentDate: faker.date.between({ from: '2024-01-01', to: new Date() }),
      paymentMethod: faker.helpers.arrayElement(['cash', 'card', 'transfer']),
      description: faker.helpers.arrayElement(paymentDescriptions),
      status: faker.helpers.arrayElement(['pending', 'completed', 'failed'])
    });
    
    payments.push(payment);
  }
  
  await Payment.insertMany(payments);
  console.log('‚úÖ –ü–ª–∞—Ç–µ–∂—ñ —Å—Ç–≤–æ—Ä–µ–Ω—ñ');
  return payments;
}

// –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
async function seedDatabase() {
  try {
    console.log('üöÄ –ü–æ—á–∞—Ç–æ–∫ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –ë–î...\n');
    
    // –û—á–∏—â–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–∏—Ö –¥–∞–Ω–∏—Ö
    console.log('–û—á–∏—â–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–∏—Ö –¥–∞–Ω–∏—Ö...');
    await Student.deleteMany({});
    await Instructor.deleteMany({});
    await Lesson.deleteMany({});
    await Payment.deleteMany({});
    console.log('‚úÖ –î–∞–Ω—ñ –æ—á–∏—â–µ–Ω—ñ\n');
    
    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
    const students = await createStudents(COUNTS.students);
    const instructors = await createInstructors(COUNTS.instructors);
    const lessons = await createLessons(COUNTS.lessons, students, instructors);
    const payments = await createPayments(COUNTS.payments, students);
    
    console.log('\nüéâ –ë–î —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø–æ–≤–Ω–µ–Ω–∞!');
    console.log(`üìä –°—Ç–≤–æ—Ä–µ–Ω–æ:`);
    console.log(`   üë®‚Äçüéì –°—Ç—É–¥–µ–Ω—Ç—ñ–≤: ${COUNTS.students}`);
    console.log(`   üë®‚Äçüè´ –Ü–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ñ–≤: ${COUNTS.instructors}`);
    console.log(`   üìö –ó–∞–Ω—è—Ç—å: ${COUNTS.lessons}`);
    console.log(`   üí∞ –ü–ª–∞—Ç–µ–∂—ñ–≤: ${COUNTS.payments}`);
    
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –ë–î:', error);
  } finally {
    mongoose.connection.close();
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
seedDatabase();